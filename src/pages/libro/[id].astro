---

import { getCollection, render } from "astro:content"; // REnder es para renderizar el contenido del archivo MD
import { SHOW_BUY_BUTTON } from "astro:env/server"; // Importar variable de entorno
import Layout from "../../layouts/Layout.astro";



//Devuelve tla funciona todas las rutas estaticas que queres que responda
export async function getStaticPaths() {

    const books = await getCollection("books"); // TRaemos la coleccion y luego mapeamos la info

    return books.map(

        (book) => ({
            params: { id: book.slug },
            props: book 
        })
    )

}

const { data, slug }:any = Astro.props;
const { id } = Astro.params;


const { title, author, img, buy } = data;

const { usa, spain } = buy;

const { Content } = await render(Astro.props); // REnderiza el contenido de los archivos Markdown



---


<Layout title={`${id}`}>
    <h1
        transition:name= {`title-${slug}`} 
    >{title}</h1>
    <h2>{author}</h2>
    <img
        transition:name= {`img-${slug}`} 
        src={`../../public/${img}`} 
        alt={id}
    >
    <br>
    {
        SHOW_BUY_BUTTON && (
            <a href={`${usa}`}>{usa}</a>
        )
    }
    {
        SHOW_BUY_BUTTON && (
                <br>
            <a href={`${spain}`}>{spain}</a>
        )
    }

    <h3 id="score"></h3>
   

    <div class="content">
        <br>
        <Content></Content>
    </div>
  

</Layout>

<style>
    .content {
        width: 100%;
        display: flex;
    }
    img {
        width: 300px;
        height: 300px;
    }
</style>

<script>
    import { SCORE_API_ENDPOINT } from "astro:env/client";

    const scoreElement:any = document.querySelector("#score");
    scoreElement.innerHTML = `Puntuacion: ${SCORE_API_ENDPOINT}`

</script>